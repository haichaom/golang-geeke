// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package log_process

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogProcessClient is the client API for LogProcess service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogProcessClient interface {
	GetLogsByLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*LogLevelReply, error)
}

type logProcessClient struct {
	cc grpc.ClientConnInterface
}

func NewLogProcessClient(cc grpc.ClientConnInterface) LogProcessClient {
	return &logProcessClient{cc}
}

func (c *logProcessClient) GetLogsByLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*LogLevelReply, error) {
	out := new(LogLevelReply)
	err := c.cc.Invoke(ctx, "/log_process.LogProcess/GetLogsByLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogProcessServer is the server API for LogProcess service.
// All implementations must embed UnimplementedLogProcessServer
// for forward compatibility
type LogProcessServer interface {
	GetLogsByLogLevel(context.Context, *LogLevelRequest) (*LogLevelReply, error)
	mustEmbedUnimplementedLogProcessServer()
}

// UnimplementedLogProcessServer must be embedded to have forward compatible implementations.
type UnimplementedLogProcessServer struct {
}

func (UnimplementedLogProcessServer) GetLogsByLogLevel(context.Context, *LogLevelRequest) (*LogLevelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogsByLogLevel not implemented")
}
func (UnimplementedLogProcessServer) mustEmbedUnimplementedLogProcessServer() {}

// UnsafeLogProcessServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogProcessServer will
// result in compilation errors.
type UnsafeLogProcessServer interface {
	mustEmbedUnimplementedLogProcessServer()
}

func RegisterLogProcessServer(s grpc.ServiceRegistrar, srv LogProcessServer) {
	s.RegisterService(&LogProcess_ServiceDesc, srv)
}

func _LogProcess_GetLogsByLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogProcessServer).GetLogsByLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/log_process.LogProcess/GetLogsByLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogProcessServer).GetLogsByLogLevel(ctx, req.(*LogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogProcess_ServiceDesc is the grpc.ServiceDesc for LogProcess service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogProcess_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "log_process.LogProcess",
	HandlerType: (*LogProcessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogsByLogLevel",
			Handler:    _LogProcess_GetLogsByLogLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/log_process/log_process.proto",
}
